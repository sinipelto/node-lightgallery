// Header with generic HMTL stuff
include _header.pug

// Libs
include _jq.pug
include _bs.pug

body
	#main
		section.jumbotron.text-center
			#errorMsg.alert.alert-danger.alert-dismissible.fade.show(role="alert", style="display: none;")
				strong#errorMsgText Hello!
				button.btn-close(type="button", data-bs-dismiss="alert", aria-label="Close")

			.container
				h1.jumbotron-heading Albums Management:
			p.lead.text-muted.
				Create, update, revoke access keys to different albums here.
		br
		br

		.container.text-center.col-auto
			h2 Token Management:
			.table-responsive
				table.table.table-striped.table-lg
					thead
						tr
							th ID
							th Album
							th Value
							th Initial Usages
							th Usages Left
							th Usages
							th Created
							th
							th
							th
					tbody
						each token in data
							tr
								th(scope="row")= token.id
								td
									a(href=`${token.album}?key=${token.value}`, target="_blank") #{token.album}
								td= token.value
								td= token.usages_init
								td= token.usages_left
								td= token.usages
								td= token.created.toLocaleString()
								td
									button(onclick=`revokeKey(${token.id});`).btn.btn-warning Revoke
								td
									button(onclick=`deleteKey(${token.id});`).btn.btn-danger Delete
								td
									button(onclick=`infoKey(${token.id});`).btn.btn-info Activity

			br
			br
			br

			.container.text-center
				.row
					.col
						h1 Create new token:
						label(for="keyAlbumCreate") Album name:
						br
						input#keyAlbumCreate(type="text")
						p#errorAlbumCreate
						br
						br
						label(for="keyUsageCreate") Usages for key (>= 0):
						br
						input#keyUsageCreate(type="text")
						p#errorUsageCreate
						br
						br
						button(onclick="createKey();").btn.btn-success Create New Key
					.col
						h1 Update an existing token:
						label(for="keyIdUpdate") Token ID:
						br
						input#keyIdUpdate(type="text")
						p#errorIdUpdate
						br
						br
						label(for="keyUsageUpdate") Usages for key (>= 0):
						br
						input#keyUsageUpdate(type="text")
						p#errorUsageUpdate
						br
						br
						button(onclick="updateKey();").btn.btn-primary Update Key

	script(type="text/javascript").
		const AUTH_KEY = "#{key}";

	script(type="text/javascript", src="/static/management.js")
